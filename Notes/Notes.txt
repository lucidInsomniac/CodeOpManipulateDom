do form first
 - function is event handler
 -event listener to your daemon
 -create a variable to store infor for form
 -display image
 -input to have an idea
 -get url
 -



 Whiteboarding: 
 -What is Whiteboarding?
 Normally used in interviews, to test knowledge, algorithms, data structures
 Given problem and work out code and go over solution

 -Some background
 White boards were available and better than paper
 -practice is frozen in time
 -computers were expensive

 -How to approach Whiteboarding
 Understand problem
 Restate problemMost involve writing a function
 You need to determine what paramters your func should accept
 Need to give meaningful names

Seek Clarification:
Do you need to check for error conditions, potential cases
what is function supposed to return, boolean, string, number, etc

Psuedocode
- dont jumpe immediately into coding even if you know How
-try pseudocoding as tactic to find stratgey and test your logic
-Be clear that you are gonna start by psuedocoding and talk through each step
-it is ok to as if pseudo code makes sense

 
Convert to code

-Write actual code that will make your examples and test pass
-if you forget syntax or method name, should be able to ask interviewer for inforbe sure totalk out loud as you solve
question, the whole point is understanding your thought process
-test the code
-attempt to comment on algorithmic


Refactor if you have time, to clean up code
-dont hesitate to ask if your solution to look good
-they might offer tips to improve
-look articulate and easier to work with if you are willing to obj discuss ways to improve
your work

Whiteboarding @ Codeop
-experience in friendly environment
-step outside your comfort zone
-connect with your self-confidence 


-References
Code Challenges
Practice talking out loud
Prac. interviews

=======================================================
HW:
Idea but not need to be exact
-It should go 4 accros and go next row
How do you know which file to put in html or js
- html is gonna be needed on html page
- js not needed in html == dynamic
- Can do this in HTML instead of JS:

<!--cointainer to hold everything in the page-->
    <div id="wrapper">


    <h1>Welcome to My Portfolio</h1> <br>
    <br>

    <!--This div feat-section is hidden until the 1st cell is clicked-->


      <div id ='feat-section'>  //left hand column
        <h2>Featured Portfolio</h2>
            <img id='feat-image'>
      </div>

      <div id='feat-grid'> //right hand column
        <h4 id='feat-title'></h4> <br>
        <p id='feat-descr'></p>
      </div>
    </div>

Part 1:

HTML:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Patchfolio</title>
    <link rel="stylesheet" href="patchfolio.css">
</head>
<body>
    
    <div id="wrapper">

        <h1>Patchfolio</h1>


        <h2>My Patches</h2>
        <div id="patch-grid"></div>
    
    
        <h2>Add New Patch</h2>
        <form>
            <label>Color
                <input name="color" type="text">
            </label>
            <button type="submit">Add Patch</button>
        </form>

    </div>


    <script src="patchfolio.js"></script>
</body>
</html>



===================================================
CSS:

Grid container, the patch is a grid cell (child of container)

#wrapper {
    max-width: 600px;
    margin: 0 auto;
}

h2 {
    border-bottom: 1px solid #ccc;
}

//grid container
#patch-grid { 
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 10px;
}

//grid item
.patch {  
    text-align: center;
    padding: 10px 0;
}



====================================================
JS:



function handleSubmit(event) {
    event.preventDefault();

    // Get the value from the form and reset form field, empties out form
    let form = event.target;
    let color = form.elements.color.value;
    console.log(color);
    form.reset();

    // Create patch wit correct text and background color
    let patch = document.createElement('div');
    patch.style.backgroundColor = color;
    patch.classList.add('patch');
    patch.textContent = color;

    // Append to my patch grid container
    let grid = document.getElementById('patch-grid');
    grid.appendChild(patch);
}

//Tell the form to call handleSubmit() on "submit" events
let form = document.querySelector('form');
form.addEventListener('submit', handleSubmit);

addEventListener is HOF, you can execute immediately


Part 1:
handleFormatSubmit(event)
    prevent form submit to server
    read data from form fieldcreate <img> & set 'src'attr
    append to grid attr
=====================================================
Part2: Demo Notes

Browser console can see all global variables and info 
can be shown.

We added new text field that collects id

Add PRoj title
Add Text box


How to store and find it later?
When infor is input into form, we need another variable to store it in

How do we save it?
    save form fields: id, imgurl, title, description) in global obj
    increment global ID counter
========================================================


HTML:

Click on = each cell has an id and cell numberdetect when click happens 
on thumnail, what value saved on form will be featured on patch



<div id= "my-grid"> </div>

CSS:

#my-grid {
display: grid;
grid-template-columns: repeat(3, 1fr);
gap: 20px;
}


#my-grid > div {

}



Dynamically create grid


JS:

function fillGrid(gridContainer, count) {
    for (let i=1; i<= count; i++) {
    let div = document.createElement('div);
    div.textContent = 
    div.id = `cell-` + i;

    //Append to grid container
    //don't need to return because it is already getting
   // div.addEventListener('click', handleClick); This adds to every cell
    gridContainer.appendChild(div);
    }
}


Click handler when click on cells, print on console

//Easy, but would need another handler to handle each cell. If 
we assign click handler 
to entire container vs item,  grid container can give info if 
all cells appended to container this is possible.

function handleClick(event) {

    /*don't want click to respond in between gaps, only grid-cell
    what can we do? Add exception by looking at id.target,
    if it was container, we want to ignore the click. container
    has a name "my-grid" and we can fix that.*/

    if (event.target.id !== 'my-grid){
        //want it to do something
        //when click happens
        console.log(event.target.id);
    }

    //if not detected as grid container, detect as something else

}



//Init:

//Display grid
let grid = document.getElementById('my-grid);
//Listens for click on webpage
grid.addEventListener('click', handleClick);
//When it hears click, execute function
fillGrid(grid, 5);


Block element vs in-line element: Go to css
Block- starts on new line
in-line - same line
===========================================================


Part 2: HW 

HTML:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Patchfolio</title>
    <link rel="stylesheet" href="patchfolio.css">
</head>
<body>
    
    <div id="wrapper">

        <h1>Patchfolio</h1>


        <h2>My Patches</h2>
        <div id="patch-grid"></div>
    
    
        <h2>Add New Patch</h2>
        <form>
            <!--use "for" to call label attr-->
            <label for="color">CSS Color</label> 
            <!--id and name used for form fields, to be available for for.elements-->
                <input id="color" name="color" type="text">
            
            <!--Add text area-->
            <label for="descr">Description</label> 
            <textarea id="descr" name="descr"></textarea>

            <button type="submit">Add Patch</button>
        </form>

    </div>


    <script src="patchfolio.js"></script>
</body>
</html>

----------------------------------------------------------


JS:
//global variables in caps vs local in lower case
let AllPatches = {};

//each patch has unique id
let NextPatchID = 1; 


function handleSubmit(event) {
    event.preventDefault();

    // Get the values: color and descr from the form and reset field
    let form = event.target;
    let color = form.elements.color.value;
    let descr = form.elements.descr.value;
    console.log(color);
    form.reset();

    //Save data to global obj
    AllPatches(NextPatchID) ={ color: color, descr: descr}; //or color, descr
   


    // Create patch with correct text and background color
    let patch = document.createElement('div');
    patch.style.backgroundColor = color;
    patch.classList.add('patch');
    patch.textContent = color;
    // ==========Connect unique IDs here!=======================
    //Every patch id is unique, need diff num for each
    patch.id = NextPatchID
    NextPatchID++;

    // Append patch to grid container
    let grid = document.getElementById('patch-grid');
    grid.appendChild(patch);
}

let form = document.querySelector('form');
form.addEventListener('submit', handleSubmit);

--------------------------------------------------------
CSS

#wrapper {
    max-width: 600px;
    margin: 0 auto;
}

h2 {
    border-bottom: 1px solid #ccc;
}

/* want css color and descr on diff lines
and wider
*/
input, textarea { 
    display: block;
    width: 50%; /*of container*/
    margin-bottom: 1em /*gap btwn items*/
    /*make it taller*/
    
}

#patch-grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 10px;
}

.patch {
    text-align: center;
    padding: 10px 0;
}

============================================================


Part 3: 
Click thumbnail and display as feature
How do we click on the thubmnails 

handleImageClick(event)
    determine id of image that was clicked
    get that img's info from global obj, need global variable outside functions
    update featured project section


HTML - Create feature proj section





